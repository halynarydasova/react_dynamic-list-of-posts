{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","api/users.ts","components/UserSelector.tsx","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","posts","onSelect","selectedPost","className","map","post","id","title","type","classNames","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postId","a","comments","Loader","NewCommentForm","updateComments","useState","authorName","setAuthorName","authorEmail","setAuthorEmail","newComment","setNewComment","nameError","setNameError","emailError","setEmailError","commentError","setCommentError","isLoading","setIsLoading","errorSetter","field","setter","onSubmit","event","preventDefault","finally","onReset","htmlFor","name","value","onChange","target","placeholder","onBlur","PostDetails","activePost","isCommentsLoading","setIsCommentsLoading","setComments","isError","setIsError","addNewComment","setAddNewComment","useEffect","catch","removeComment","commentId","deleteComment","currentComments","filter","commentItem","length","currComment","email","commentBody","href","bodyComment","submitedComment","getUsers","users","UserSelector","selectedUser","setUsers","showList","setShowList","role","user","handleUserSelect","getPosts","userId","App","setSelectedUser","userPosts","setUserPosts","postLoadingError","setPostLoadingError","setSelectedPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46e09edd.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  onSelect: (post: Post | null) => void;\n  selectedPost: Post | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onSelect,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => {\n          const { id, title } = post;\n\n          return (\n            <tr data-cy=\"Post\" key={id}>\n              <td data-cy=\"PostId\">{id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': selectedPost?.id !== id,\n                  })}\n                  onClick={() => {\n                    if (selectedPost?.id !== id) {\n                      onSelect(post);\n                    } else {\n                      onSelect(null);\n                    }\n                  }}\n                >\n                  {(selectedPost?.id !== id) ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = async (postId: number) => {\n  const comments = await client.get<Comment[]>(`/comments?postId=\n  ${postId}`);\n\n  return comments || null;\n};\n\nexport const addCommentToList = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  updateComments: (\n    name: string,\n    email: string,\n    bodyComment: string\n  ) => Promise<void | Comment>\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ updateComments }) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [newComment, setNewComment] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [commentError, setCommentError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const errorSetter = (field: string, setter: (value: boolean) => void) => {\n    if (field === '') {\n      setter(true);\n    } else {\n      setter(false);\n    }\n  };\n\n  const clearForm = () => {\n    setAuthorName('');\n    setAuthorEmail('');\n    setNewComment('');\n    setNameError(false);\n    setEmailError(false);\n    setCommentError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    if (authorName && authorEmail && newComment) {\n      updateComments(authorName, authorEmail, newComment)\n        .finally(() => {\n          setIsLoading(false);\n          setNewComment('');\n        });\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={clearForm}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={authorName}\n            onChange={(event) => {\n              setNameError(false);\n              setAuthorName(event.target.value);\n            }}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': nameError,\n            })}\n            onBlur={() => errorSetter(authorName, setNameError)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={authorEmail}\n            onChange={(event) => setAuthorEmail(event.target.value)}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': emailError,\n            })}\n            onBlur={() => errorSetter(authorEmail, setEmailError)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={newComment}\n            onChange={(event) => setNewComment(event.target.value)}\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': commentError,\n            })}\n            onBlur={() => errorSetter(newComment, setCommentError)}\n          />\n        </div>\n\n        {commentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { addCommentToList, deleteComment, getComments } from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  activePost: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ activePost }) => {\n  const { id, title, body } = activePost;\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [addNewComment, setAddNewComment] = useState(false);\n\n  useEffect(() => {\n    if (activePost) {\n      setIsCommentsLoading(true);\n      getComments(id).then(data => setComments(data))\n        .catch(() => setIsError(true))\n        .finally(() => setIsCommentsLoading(false));\n    }\n\n    return () => {\n      setComments([]);\n    };\n  }, [activePost]);\n\n  const createComment = (\n    name: string,\n    email: string,\n    bodyComment: string,\n  ) => (\n    addCommentToList({\n      name,\n      email,\n      body: bodyComment,\n      postId: activePost.id,\n    })\n      .then(submitedComment => setComments(\n        currentComments => [...currentComments, submitedComment],\n      ))\n      .catch(() => setIsError(true))\n  );\n\n  const removeComment = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        setComments(currentComments => (\n          currentComments.filter(commentItem => commentItem.id !== commentId)\n        ));\n      })\n      .catch(() => setIsError(true));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && <Loader />}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isCommentsLoading && (comments?.length === 0\n            ? (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )\n\n            : (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n                {comments.map(currComment => {\n                  const {\n                    name,\n                    email,\n                    id: commentId,\n                    body: commentBody,\n                  } = currComment;\n\n                  return (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={commentId}\n                    >\n                      <div className=\"message-header\">\n                        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                          {name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => removeComment(commentId)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {commentBody}\n                      </div>\n                    </article>\n                  );\n                })}\n              </>\n            ))}\n\n          {!addNewComment && !isCommentsLoading && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setAddNewComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {addNewComment && (\n          <NewCommentForm\n            updateComments={createComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = async () => {\n  const users = await client.get<User[]>('/users');\n\n  return users || null;\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getUsers } from '../api/users';\nimport { User } from '../types/User';\n\ntype Props = {\n  onSelect: (user: User) => void;\n  selectedUser: User | null;\n};\n\nexport const UserSelector: React.FC<Props> = ({ onSelect, selectedUser }) => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [showList, setShowList] = useState(false);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n\n    return () => setUsers(null);\n  }, []);\n\n  const handleUserSelect = (user: User) => {\n    onSelect(user);\n    setShowList(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': showList,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setShowList(true);\n          }}\n        >\n          <span>{!selectedUser ? 'Choose a user' : selectedUser.name}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {showList && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users?.map(user => {\n              const { id, name } = user;\n\n              return (\n                <a\n                  href={`#user-${id}`}\n                  key={id}\n                  className={classNames('dropdown-item', {\n                    'is-active': selectedUser?.id === id,\n                  })}\n                  onClick={() => handleUserSelect(user)}\n                >\n                  {name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = async (userId: number) => {\n  const posts = await client.get<Post[]>(`/posts?userId=${userId}`);\n\n  return posts || null;\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [postLoadingError, setPostLoadingError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setSelectedPost(null);\n      setIsLoading(true);\n      getPosts(selectedUser.id)\n        .then(setUserPosts)\n        .catch(() => {\n          setPostLoadingError(true);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  onSelect={setSelectedUser}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {postLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isLoading && userPosts && (userPosts.length > 0\n                  ? (\n                    <PostsList\n                      posts={userPosts}\n                      onSelect={setSelectedPost}\n                      selectedPost={selectedPost}\n                    />\n                  )\n                  : (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  ))}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails activePost={selectedPost} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}